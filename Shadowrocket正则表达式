Shadowrocket正则表达式
----------
# policy-regex-filter表示正则式或关键词筛选，常用写法：
# 保留节点名称含有关键词A和B的节点:
# (?=.*(A))^(?=.*(B))^.*$ 和(?i)(Netflix|奈飞)
# 保留节点名称含有关键词A或B的节点:
# A|B
# 排除节点名称含有关键词A或B的节点:
# ^((?!(A|B)).)*$
# 保留节点名称含有关键词A并排除含有关键词B的节点:
# (?=.*(A).)^((?!(B)).)*$
# ----------

在正则表达式中，“排除特定条件”可以通过 负向前瞻（Negative Lookahead） 和 否定字符集 等技术实现。这种方式可以用来定义“匹配所有内容，除了某些特定条件”的规则。

以下是一些常见场景和对应的正则表达式写法：
基础语法：负向前瞻
格式：
^(?!pattern).*$
	•	(?!pattern)：负向前瞻，用于排除 pattern。
	•	.*：匹配任意字符（除了被排除的内容）。
示例：排除特定条件
1. 排除某个单词
需求：匹配所有字符串，但排除包含 example 的。
^(?!.*example).*$
	•	解释：
	•	(?!.*example)：排除包含 example 的字符串。
	•	.*$：匹配其他任意字符串。
2. 排除多个关键词
需求：匹配所有字符串，但排除包含 example 和 test 的。
^(?!.*(example|test)).*$
	•	解释：
	•	(example|test)：匹配 example 或 test。
	•	(?!.*(example|test))：排除包含 example 或 test 的字符串。
3. 排除特定前缀
需求：排除以 192. 开头的 IP 地址。
^(?!192\.).*$
	•	解释：
	•	(?!192\.)：排除以 192. 开头的字符串。
4. 排除特定的子域名
需求：匹配所有域名，但排除以 sub.example.com 结尾的。
^(?!.*sub\.example\.com$).*
	•	解释：
	•	(?!.*sub\.example\.com$)：排除以 sub.example.com 结尾的字符串。
5. 排除 IP 地址段
需求：排除 192.168.*.* 的 IP 地址。
^(?!192\.168\.).*$
	•	解释：
	•	(?!192\.168\.)：排除以 192.168. 开头的字符串。
6. 排除特定文件类型
需求：匹配所有 URL，但排除以 .jpg 或 .png 结尾的。
^(?!.*\.(jpg|png)$).*
	•	解释：
	•	(jpg|png)：匹配 jpg 或 png。
	•	(?!.*\.(jpg|png)$)：排除以 .jpg 或 .png 结尾的字符串。
进阶：排除复杂条件
排除特定关键词，同时包含其他条件
需求：匹配包含 allowed 的字符串，但排除其中包含 blocked 的。
^(?=.*allowed)(?!.*blocked).*$ 
	•	解释：
	•	(?=.*allowed)：匹配包含 allowed 的字符串。
	•	(?!.*blocked)：排除包含 blocked 的字符串。
注意事项
	1.	优先顺序：
	•	正则表达式是按字符流从左到右解析的，负向前瞻会优先检查排除条件。
	2.	性能问题：
	•	如果条件复杂，正则可能会带来性能问题，特别是在处理大量数据时。
	3.	Shadowrocket 中的规则：
	•	Shadowrocket 按规则的先后顺序匹配，如果负向前瞻的正则逻辑复杂，可以考虑拆分规则来实现更高效的流量处理。
通过灵活使用负向前瞻，结合 Shadowrocket 的规则功能，可以实现复杂的“排除特定条件”的流量处理策略。